import * as React from 'react';

import { cn } from '@/lib/utils';
import clsx from 'clsx';
import { uniqueId } from 'lodash';
import TableLoader from '../tableLoader';
import { Pagination } from './pagination';
import { CustomTableHeader, HeaderButton } from './table-header';

function Table({ className, ...props }: React.ComponentProps<'table'>) {
  return (
    <div className='relative w-full overflow-auto'>
      <table
        data-slot='table'
        className={cn('w-full caption-bottom text-sm', className)}
        {...props}
      />
    </div>
  );
}

function TableHeader({ className, ...props }: React.ComponentProps<'thead'>) {
  return <thead data-slot='table-header' className={cn('[&_tr]:border-b', className)} {...props} />;
}

function TableBody({ className, ...props }: React.ComponentProps<'tbody'>) {
  return (
    <tbody
      data-slot='table-body'
      className={cn('[&_tr:last-child]:border-0', className)}
      {...props}
    />
  );
}

function TableFooter({ className, ...props }: React.ComponentProps<'tfoot'>) {
  return (
    <tfoot
      data-slot='table-footer'
      className={cn('bg-muted/50 border-t font-medium [&>tr]:last:border-b-0', className)}
      {...props}
    />
  );
}

function TableRow({ className, ...props }: React.ComponentProps<'tr'>) {
  return (
    <tr
      data-slot='table-row'
      className={cn(
        'hover:bg-muted/50 data-[state=selected]:bg-muted border-b transition-colors',
        className,
      )}
      {...props}
    />
  );
}

function TableHead({ className, ...props }: React.ComponentProps<'th'>) {
  return (
    <th
      data-slot='table-head'
      className={cn(
        'text-muted-foreground h-12 px-4 text-left align-middle font-medium [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]',
        className,
      )}
      {...props}
    />
  );
}

function TableCell({ className, ...props }: React.ComponentProps<'td'>) {
  return (
    <td
      data-slot='table-cell'
      className={cn(
        'p-4 align-middle [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]',
        className,
      )}
      {...props}
    />
  );
}

function TableCaption({ className, ...props }: React.ComponentProps<'caption'>) {
  return (
    <caption
      data-slot='table-caption'
      className={cn('text-muted-foreground mt-4 text-sm', className)}
      {...props}
    />
  );
}

export { Table, TableBody, TableCaption, TableCell, TableFooter, TableHead, TableHeader, TableRow };

type tableCell = {
  component?: React.ReactNode;
  function?: () => void;
  align: string;
};

type CommonTableProps = {
  data: { [key: string]: tableCell }[];
  id?: string;
  title?: string;
  loading?: boolean;
  pagination?: boolean;
  emptyText?: string | false | null;
  onSearch?: (value: string) => void;
  searchTerm?: string;
  onPageChange: (page: number) => void;
  totalCount?: number;
  pageNo?: number;
  noOfRecords?: number;
  tableHeader?: boolean;
  searchPlaceholder: string;
  headerButtons?: HeaderButton[];
} & (
  | {
      pagination?: true;
    }
  | {
      pagination?: false;
    }
);

export const CustomTable: React.FC<CommonTableProps> = ({
  data,
  title,
  loading,
  pagination = true,
  onPageChange,
  emptyText,
  onSearch,
  totalCount = 0,
  pageNo = 1,
  noOfRecords = 10,
  searchTerm,
  tableHeader = true,
  id,
  searchPlaceholder,
  headerButtons,
}) => {
  const [searchText, setSearchText] = React.useState<string>(searchTerm || '');
  const handleSearch = (searchTerm: string) => {
    setSearchText(searchTerm);
    onSearch?.(searchTerm);
  };

  return (
    <div className='flex flex-col gap-5'>
      {tableHeader && (
        <CustomTableHeader
          id={id || uniqueId('data_table')}
          loading={loading}
          searchPlaceholder={searchPlaceholder}
          title={title}
          searchValue={searchText}
          onSearch={handleSearch}
          headerButtons={headerButtons}
          toggleView={true}
        />
      )}
      <div className='border-[#E2E4E8] border-[1px] bg-white rounded-[8px]'>
        {' '}
        {(() => {
          if (loading) return <TableLoader />;
          else if (emptyText)
            return (
              <div className='bg-white w-full flex items-center justify-center h-[calc(100vh-361px)]'>
                <h3 className='text-2xl text-[#6d83b8] font-medium '>{emptyText}</h3>
              </div>
            );
          else
            return (
              <Table>
                <TableHeader>
                  <TableRow>
                    {data[0] &&
                      Object.keys(data[0])
                        .filter((cell) => cell !== 'clickAction')
                        .map((cell) => (
                          <TableHead
                            key={uniqueId(cell)}
                            className={cn(
                              data?.[0][cell]?.align === 'center' ? 'text-center' : 'text-left',
                              'font-semibold text-[#16181B]',
                            )}
                            scope='col'
                          >
                            <h4 className='text-sm'>{cell}</h4>
                          </TableHead>
                        ))}
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {data.map((row, rowIndex) => (
                    <TableRow
                      className={clsx(
                        'hover:bg-muted/50',
                        row.clickAction?.function && 'cursor-pointer',
                      )}
                      key={uniqueId(Object.keys(row)[0])}
                      onClick={() => row.clickAction?.function?.()}
                      data-testid={`tableCell-${rowIndex}-test`}
                    >
                      {Object.values(row).map((value, valueIndex) => {
                        if (Object.values(row).length === valueIndex) return null;
                        else
                          return (
                            <TableCell
                              key={uniqueId(String(valueIndex))}
                              className={value.align === 'center' ? 'text-center' : 'text-left'}
                              scope='row'
                            >
                              {value.component as React.ReactNode}
                            </TableCell>
                          );
                      })}
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            );
        })()}
      </div>
      {pagination && (
        <Pagination
          currentPage={pageNo}
          dataCount={totalCount}
          itemsPerPage={noOfRecords}
          onChange={onPageChange}
        />
      )}
    </div>
  );
};
