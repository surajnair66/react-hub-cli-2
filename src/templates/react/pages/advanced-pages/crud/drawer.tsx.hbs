import { useEffect } from 'react';
import { zodResolver } from '@hookform/resolvers/zod';
import { useForm } from 'react-hook-form';
import { z } from 'zod';

import { Button } from '@/components/ui/button';
import {
  Drawer,
  DrawerClose,
  DrawerContent,
  DrawerDescription,
  DrawerFooter,
  DrawerHeader,
  DrawerTitle,
} from '@/components/ui/drawer';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';

// Define validation schema based on the fields
const {{singularName}}Schema = z.object({
  {{#if editMode}}
  _id: z.string(),
  {{/if}}
  {{#each fields}}
  {{#if this.hidden}}
  {{this.name}}: z.{{this.validationType}},
  {{else}}
  {{this.name}}: {{{this.zodString}}},
  {{/if}}
  {{/each}}
});

export type {{singularName}}FormValues = z.infer<typeof {{singularName}}Schema>;

type {{singularName}}DrawerProps = {
  isOpen: boolean;
  onClose: () => void;
  onSubmit: (data: {{singularName}}FormValues) => void;
  initialData?: any;
  isLoading: boolean;
  drawerTitle: string;
};

export function {{#if editMode}}Edit{{else}}Create{{/if}}Drawer({
  isOpen,
  onClose,
  onSubmit,
  initialData,
  isLoading,
  drawerTitle,
}: {{singularName}}DrawerProps) {
  const {
    register,
    handleSubmit,
    reset,
    formState: { errors },
    setValue,
  } = useForm<{{singularName}}FormValues>({
    resolver: zodResolver({{singularName}}Schema),
    defaultValues: {
      {{#each fields}}
      {{#if this.defaultValue}}
      {{this.name}}: '{{this.defaultValue}}',
      {{/if}}
      {{/each}}
    },
  });

  // Set form values when editing
  useEffect(() => {
    if (initialData) {
      {{#each fields}}
      {{#if this.hidden}}
      setValue('{{this.name}}', '{{this.defaultValue}}' || initialData?.{{this.name}} || '');
      {{else}}
      setValue('{{this.name}}', initialData?.{{this.name}} || '');
      {{/if}}
      {{/each}}
    } else {
      reset({
        {{#each fields}}
        {{#if this.defaultValue}}
        {{this.name}}: '{{this.defaultValue}}',
        {{else}}
        {{this.name}}: '',
        {{/if}}
        {{/each}}
      });
    }
  }, [initialData, reset, setValue]);

  const processSubmit = (data: {{singularName}}FormValues) => {
    onSubmit(data);
  };

  return (
    <Drawer open={isOpen} onOpenChange={onClose}>
      <DrawerContent className="max-h-[90vh] overflow-y-auto">
        <div className="mx-auto w-full max-w-md">
          <DrawerHeader>
            <DrawerTitle>{drawerTitle}</DrawerTitle>
            <DrawerDescription>
              Fill in the details below to {{#if editMode}}update{{else}}create{{/if}} a {{singularName}}.
            </DrawerDescription>
          </DrawerHeader>
          <form onSubmit={handleSubmit(processSubmit)} className="px-4">
            <div className="grid gap-4 py-4">
              {{#each fields}}
              {{#unless this.hidden}}
              <div className="grid gap-2">
                <Label htmlFor="{{this.name}}">{{this.label}}</Label>
                {{#if (eq this.type "textarea")}}
                <Textarea
                  id="{{this.name}}"
                  {...register('{{this.name}}')}
                  placeholder="{{this.placeholder}}"
                  className="resize-none"
                />
                {{else if (eq this.type "select")}}
                <Select 
                  onValueChange={(value) => setValue('{{this.name}}', value)} 
                  defaultValue={initialData?.{{this.name}} || ''}
                >
                  <SelectTrigger>
                    <SelectValue placeholder="Select {{this.label}}" />
                  </SelectTrigger>
                  <SelectContent>
                    {{#each this.options.values}}
                    <SelectItem value="{{this}}">{{this}}</SelectItem>
                    {{/each}}
                  </SelectContent>
                </Select>
                {{else if (eq this.type "multiSelect")}}
                {/* For multiSelect, we would need a custom component or library like react-select */}
                {{else}}
                <Input
                  id="{{this.name}}"
                  type="{{this.type}}"
                  {...register('{{this.name}}')}
                  placeholder="{{this.placeholder}}"
                />
                {{/if}}
                {errors.{{this.name}} && (
                  <p className="text-sm text-red-500">{errors.{{this.name}}?.message}</p>
                )}
              </div>
              {{/unless}}
              {{/each}}
            </div>
            <DrawerFooter>
              <Button type="submit" loading={isLoading}>
                {{#if editMode}}Update{{else}}Create{{/if}}
              </Button>
              <DrawerClose asChild>
                <Button variant="outline">Cancel</Button>
              </DrawerClose>
            </DrawerFooter>
          </form>
        </div>
      </DrawerContent>
    </Drawer>
  );
}